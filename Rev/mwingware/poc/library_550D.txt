# Source Generated with Decompyle++
# File: 58_Python3.8b4_3413.pyc (Python 3.8)

import math

def Mwing_star_algorithm(indices = ([],)):
    result = []
    for i, c in enumerate(indices):
        if i % 2 == 0:
            extra_ordinary = ord(c) * 123 * i + 1
            result.append(extra_ordinary)
            continue
        result.append(str(ord(c)) + '|')
    return result


def Reverse_Mwing_star_algorithm(indices = ([],)):
    result = []
    for i, c in enumerate(indices):
        if i % 2 == 0:
            transformed_value = c
            original_char = chr((transformed_value - 1) // 123 ** i)
            result.append(original_char)
            continue
        result.append(chr(c))
    return ''.join(result)


def Mwing_sum_algorithm(numbers = ([],)):
    even_sum = None((lambda .0 = None: for i in .0:
numbers[i])(range(0, len(numbers), 2)))
    odd_sum = None((lambda .0 = None: for i in .0:
numbers[i])(range(1, len(numbers), 2)))
    print(f'''Final Algorithm ( SUPER EFFICIENT, ENCRYPT ALL LETTER WITH ONLY RESULT JUST SUPER SHORT): {even_sum}|Key: {odd_sum}''')


def Mwing_reverse_algorithm(elements = ([],)):
    for el in reversed(elements):
        print(el, '!', **('end',))


def Mwing_square_algorithm(numbers = ([],)):
    result = []
    for i, num in enumerate(numbers):
        if i % 2 == 0:
            result.append(str(ord(num) ** 2) + '|')
            continue
        result.append(str(num) + '|')
    return result


def Mwing_char_sum_algorithm(chars = ([],)):
    ascii_sum = sum((lambda .0: for i, c in .0:
if i % 2 == 0:
ord(c)continueNone)(enumerate(chars)))
    for i, c in enumerate(chars):
        if i % 2 == 0:
            print(ascii_sum, '|', **('end',))
            continue
        print(c, '|', **('end',))

